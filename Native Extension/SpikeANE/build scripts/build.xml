<?xml version="1.0" encoding="UTF-8"?> 
<project name="Air Native Extension Build Script" default="package ios ane"> 
	<!-- Configuration files: --> 
	<property file="local.properties"/> 
	<property file="build.properties"/>
	<!-- Building of the projects and gathering of the files for packaging an ANE happens in a temporary folder structure, cleaned up at the end: --> 
	<property name="tempdir"  value="${user.home}/${ane.temp}"/> 
	
	<!-- ************************************************************ 
		iOS Native Library Targets 
	************************************************************ -->
	<!-- Clean the Xcode project -->
	<target name="clean ios" description="Clean the iOS Library" depends="set build type">
		<exec executable="xcodebuild" failonerror="true" dir="${iOS.library.root}"> 
			<arg line=" clean -configuration ${iOS.library.build.type} "/> 
		</exec> 
	</target>
	<!-- Build the XCode project -->
	<target name="build ios" description="Build the iOS Library" depends="set build type"> 
		<property name="iOS.library.builddir" value="build"/> 
		<exec executable="xcodebuild" failonerror="true" dir="${iOS.library.root}"> 
			<arg 
				line=" -project NativeExtensioniOS.xcodeproj -target NativeExtensioniOS ONLY_ACTIVE_ARCH=NO -arch armv7 -arch arm64 only_active_arch=no  -configuration ${iOS.library.build.type} SYMROOT=${iOS.library.builddir} "/> 
			<!-- Note: the SYMROOT path is relative to {dir}. --> 
		</exec> 
	</target>
	<!-- Rebuild the XCode project --> 
	<target name="rebuild ios" depends="clean ios,build ios" description="First clean then build the Xcode project"/>
	
	<!-- ************************************************************************************** 
		Adobe AIR Library Targets - copy swc, .a (only ios), extract swf and store in temporary package folder
	*************************************************************************************** --> 
	<!-- Copy ios swc and extract swf and store in temporary package folder -->
	<target name="copy ios files for packaging"> 
		<copy file="../bin/${air.library.name}.swc" todir="${tempdir}/package"/> 
		<copy file="../bin/${air.library.name}.swc" todir="${tempdir}/${air.library.name}/swc"/>
		<unzip src="${tempdir}/${air.library.name}/swc/${air.library.name}.swc" dest="${tempdir}/${air.library.name}/swc" overwrite="true"/> 
		<copy file="${tempdir}/${air.library.name}/swc/library.swf" todir="${tempdir}/package/ios" overwrite="true"/> 
		<copy file="../../iOS/NativeExtensioniOS/build/${iOS.library.build.type}-iphoneos/${iOS.library}" todir="${tempdir}/ios" overwrite="true"/> 
		<copy file="../../iOS/NativeExtensioniOS/build/${iOS.library.build.type}-iphoneos/${iOS.library}" todir="${tempdir}/package/ios" overwrite="true"/> 
		<copy file="../src/${air.library.name}-extension.xml" todir="${tempdir}/package"/>
		<copy file="../src/${air.library.name}-ios-platformoptions.xml" todir="${tempdir}/package"/>
		<copy file="../src/${air.library.name}-ios-platformoptions.xml" todir="${tempdir}/package"/>
	</target>

	<!-- Copy default swc and extract swf and store in temporary package folder -->
	<target name="copy default files for packaging"> 
		<copy file="../../${default.library.name}/bin/${default.library.name}.swc" todir="${tempdir}/${default.library.name}/swc"/> 
		<copy file="../../${default.library.name}/bin/${default.library.name}.swc" todir="${tempdir}/package/default"/> 
		<unzip src="${tempdir}/package/default/${default.library.name}.swc" dest="${tempdir}/package/default" overwrite="true"/> 
	</target>
	
	<!-- ***************************************************************************** 
		Create ANE, copy ANE to final destination, delete temporary package folder
	****************************************************************************** --> 
	<!-- Create the ANE package for iOS --> 
	<target name="package ios ane" depends="set build type, create package folder, rebuild ios, copy ios files for packaging, copy default files for packaging" description="Package the extension into an ANE file"> 
		<exec executable="${ADT}" failonerror="true" dir="${tempdir}/package"> 
			<arg line=" -package -target ane ane/${ane.name}.ane ${air.library.name}-extension.xml -swc ${air.library.name}.swc -platform iPhone-ARM -platformoptions ${air.library.name}-ios-platformoptions.xml -C ios . -platform default -C default . "/> 
		</exec> 
		<!-- copy final ane to destination -->
		<mkdir dir="${ane.destination}"/> 
		<move file="${tempdir}/package/ane/${air.library.name}.ane" todir="${ane.destination}" overwrite="true"/> 
		<delete dir="${tempdir}"/>
	</target>

	<!-- ******************************************************************************************************** 
		determine build type , debug or release, result is stored in variable iOS.library.build.type
	********************************************************************************************************* -->
	<target name="set build type" depends="check debug, check release"/>
	
	<target name="check debug" if="${build.debug}" depends="check release" 
		description="Check if ${debug} is true and if it is, set the properties below for a debug build"> 
		<property name="iOS.library.build.type" value="Debug"/> 
	</target>
	<target name="check release" unless="${build.debug}" 
		description="Check if ${debug} is false and if it is, set the properties below for a release build"> 
		<property name="iOS.library.build.type" value="Release"/> 
	</target>
	

	<!-- *********************************************************** 
		create temporary package folder for the package ingedients
	************************************************************ --> 
	<target name="create package folder" description="Create temporary folder for the package ingredients"> 
		<mkdir dir="${tempdir}/ios"/>  
		<mkdir dir="${tempdir}/package"/>
		<mkdir dir="${tempdir}/package/ane"/>
		<mkdir dir="${tempdir}/package/default"/>
		<mkdir dir="${tempdir}/package/ios"/>
		<mkdir dir="${tempdir}/${default.library.name}"/>
		<mkdir dir="${tempdir}/${default.library.name}/swc"/>
		<mkdir dir="${tempdir}/${air.library.name}"/>
		<mkdir dir="${tempdir}/${air.library.name}/swc"/>
	</target>
	
</project>